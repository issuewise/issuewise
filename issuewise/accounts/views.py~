from django.shortcuts import get_object_or_404

from rest_framework import generics
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.authtoken.models import Token
from rest_framework.authentication import BasicAuthentication
from rest_framework.permissions import IsAuthenticated
from rest_framework.exceptions import PermissionDenied

from core.views import PermissionMixin
from accounts.models import WiseUser, WiseActivation
from serializers import WiseUserSerializer
from exceptions import UserNotActive


class Accounts(generics.CreateAPIView):

    model = WiseUser
    serializer_class = WiseUserSerializer
    
    
    
class ActivationLinkCheck(PermissionMixin, APIView):

    def get(self, request, uuid, uri_name, format = None):
        obj = get_object_or_404(WiseActivation, uuid = uuid)
        obj.creator.activate()
        return Response() 
        
        
class ActivationLinkCreate(PermissionMixin, APIView):
    
    authentication_classes = (BasicAuthentication,)
    permission_classes = (IsAuthenticated,)

    def post(self, request,uri_name, format = None):
        user = get_object_or_404(WiseUser, uri_name = uri_name)
        if not self.permit(self.request, self.__class__.__name__, None , user, self.kwargs):
            raise PermissionDenied
        user.send_activation_email()
        return Response()
        
        
class ObtainTokenForActivatedUsers(ObtainAuthToken):

    def post(self, request):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']
        if user.activity_status == 'I':
            raise UserNotActive(explanation = user.explanation)
        token, created = Token.objects.get_or_create(user=user)
        return Response({'token': token.key})
        
        
    